/*
* generated by Xtext
*/
package ooi.bspl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import ooi.bspl.services.BSPLGrammarAccess;

public class BSPLParser extends AbstractContentAssistParser {
	
	@Inject
	private BSPLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected ooi.bspl.ui.contentassist.antlr.internal.InternalBSPLParser createParser() {
		ooi.bspl.ui.contentassist.antlr.internal.InternalBSPLParser result = new ooi.bspl.ui.contentassist.antlr.internal.InternalBSPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProtocolAccess().getReferencesAlternatives_12_0(), "rule__Protocol__ReferencesAlternatives_12_0");
					put(grammarAccess.getKAdornmentAccess().getAlternatives(), "rule__KAdornment__Alternatives");
					put(grammarAccess.getProtocolAccess().getGroup(), "rule__Protocol__Group__0");
					put(grammarAccess.getProtocolAccess().getGroup_7(), "rule__Protocol__Group_7__0");
					put(grammarAccess.getProtocolAccess().getGroup_10(), "rule__Protocol__Group_10__0");
					put(grammarAccess.getProtocolAccess().getGroup_11(), "rule__Protocol__Group_11__0");
					put(grammarAccess.getProtocolAccess().getGroup_11_2(), "rule__Protocol__Group_11_2__0");
					put(grammarAccess.getParamDeclAccess().getGroup(), "rule__ParamDecl__Group__0");
					put(grammarAccess.getParamRefAccess().getGroup(), "rule__ParamRef__Group__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getMessageAccess().getGroup_7(), "rule__Message__Group_7__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_2(), "rule__Reference__Group_2__0");
					put(grammarAccess.getReferenceAccess().getGroup_4(), "rule__Reference__Group_4__0");
					put(grammarAccess.getProtocolAccess().getJunkProtocolAssignment_0(), "rule__Protocol__JunkProtocolAssignment_0");
					put(grammarAccess.getProtocolAccess().getNameAssignment_1(), "rule__Protocol__NameAssignment_1");
					put(grammarAccess.getProtocolAccess().getJunkRoleAssignment_3(), "rule__Protocol__JunkRoleAssignment_3");
					put(grammarAccess.getProtocolAccess().getRolesAssignment_4(), "rule__Protocol__RolesAssignment_4");
					put(grammarAccess.getProtocolAccess().getRolesAssignment_6(), "rule__Protocol__RolesAssignment_6");
					put(grammarAccess.getProtocolAccess().getRolesAssignment_7_1(), "rule__Protocol__RolesAssignment_7_1");
					put(grammarAccess.getProtocolAccess().getJunkPubAssignment_8(), "rule__Protocol__JunkPubAssignment_8");
					put(grammarAccess.getProtocolAccess().getPublicParamsAssignment_9(), "rule__Protocol__PublicParamsAssignment_9");
					put(grammarAccess.getProtocolAccess().getPublicParamsAssignment_10_1(), "rule__Protocol__PublicParamsAssignment_10_1");
					put(grammarAccess.getProtocolAccess().getJunkPrivAssignment_11_0(), "rule__Protocol__JunkPrivAssignment_11_0");
					put(grammarAccess.getProtocolAccess().getPrivateParamsAssignment_11_1(), "rule__Protocol__PrivateParamsAssignment_11_1");
					put(grammarAccess.getProtocolAccess().getPrivateParamsAssignment_11_2_1(), "rule__Protocol__PrivateParamsAssignment_11_2_1");
					put(grammarAccess.getProtocolAccess().getReferencesAssignment_12(), "rule__Protocol__ReferencesAssignment_12");
					put(grammarAccess.getRoleAccess().getNameAssignment(), "rule__Role__NameAssignment");
					put(grammarAccess.getParamDeclAccess().getAdornmentAssignment_0(), "rule__ParamDecl__AdornmentAssignment_0");
					put(grammarAccess.getParamDeclAccess().getParamAssignment_1(), "rule__ParamDecl__ParamAssignment_1");
					put(grammarAccess.getParamDeclAccess().getIsKeyAssignment_2(), "rule__ParamDecl__IsKeyAssignment_2");
					put(grammarAccess.getParameterAccess().getNameAssignment(), "rule__Parameter__NameAssignment");
					put(grammarAccess.getParamRefAccess().getAdornmentAssignment_0(), "rule__ParamRef__AdornmentAssignment_0");
					put(grammarAccess.getParamRefAccess().getParamAssignment_1(), "rule__ParamRef__ParamAssignment_1");
					put(grammarAccess.getParamRefAccess().getIsKeyAssignment_2(), "rule__ParamRef__IsKeyAssignment_2");
					put(grammarAccess.getMessageAccess().getSenderAssignment_0(), "rule__Message__SenderAssignment_0");
					put(grammarAccess.getMessageAccess().getReceiverAssignment_2(), "rule__Message__ReceiverAssignment_2");
					put(grammarAccess.getMessageAccess().getNameAssignment_4(), "rule__Message__NameAssignment_4");
					put(grammarAccess.getMessageAccess().getParamsAssignment_6(), "rule__Message__ParamsAssignment_6");
					put(grammarAccess.getMessageAccess().getParamsAssignment_7_1(), "rule__Message__ParamsAssignment_7_1");
					put(grammarAccess.getReferenceAccess().getRefAssignment_0(), "rule__Reference__RefAssignment_0");
					put(grammarAccess.getReferenceAccess().getRolesAssignment_2_0(), "rule__Reference__RolesAssignment_2_0");
					put(grammarAccess.getReferenceAccess().getParamsAssignment_3(), "rule__Reference__ParamsAssignment_3");
					put(grammarAccess.getReferenceAccess().getParamsAssignment_4_1(), "rule__Reference__ParamsAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			ooi.bspl.ui.contentassist.antlr.internal.InternalBSPLParser typedParser = (ooi.bspl.ui.contentassist.antlr.internal.InternalBSPLParser) parser;
			typedParser.entryRuleProtocol();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BSPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BSPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
