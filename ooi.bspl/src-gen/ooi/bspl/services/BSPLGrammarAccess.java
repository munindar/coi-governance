/*
* generated by Xtext
*/

package ooi.bspl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BSPLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJunkProtocolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJunkProtocolKPROTOCOLEnumRuleCall_0_0 = (RuleCall)cJunkProtocolAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLBRACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cJunkRoleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJunkRoleKROLEEnumRuleCall_3_0 = (RuleCall)cJunkRoleAssignment_3.eContents().get(0);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesRoleParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cRolesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRolesRoleParserRuleCall_6_0 = (RuleCall)cRolesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cCOMMATerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cRolesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cRolesRoleParserRuleCall_7_1_0 = (RuleCall)cRolesAssignment_7_1.eContents().get(0);
		private final Assignment cJunkPubAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cJunkPubKPARAMETEREnumRuleCall_8_0 = (RuleCall)cJunkPubAssignment_8.eContents().get(0);
		private final Assignment cPublicParamsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPublicParamsParamDeclParserRuleCall_9_0 = (RuleCall)cPublicParamsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final RuleCall cCOMMATerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Assignment cPublicParamsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPublicParamsParamDeclParserRuleCall_10_1_0 = (RuleCall)cPublicParamsAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cJunkPrivAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cJunkPrivKPRIVATEEnumRuleCall_11_0_0 = (RuleCall)cJunkPrivAssignment_11_0.eContents().get(0);
		private final Assignment cPrivateParamsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cPrivateParamsParameterParserRuleCall_11_1_0 = (RuleCall)cPrivateParamsAssignment_11_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_11_2_0 = (RuleCall)cGroup_11_2.eContents().get(0);
		private final Assignment cPrivateParamsAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cPrivateParamsParameterParserRuleCall_11_2_1_0 = (RuleCall)cPrivateParamsAssignment_11_2_1.eContents().get(0);
		private final Assignment cReferencesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Alternatives cReferencesAlternatives_12_0 = (Alternatives)cReferencesAssignment_12.eContents().get(0);
		private final RuleCall cReferencesReferenceParserRuleCall_12_0_0 = (RuleCall)cReferencesAlternatives_12_0.eContents().get(0);
		private final RuleCall cReferencesMessageParserRuleCall_12_0_1 = (RuleCall)cReferencesAlternatives_12_0.eContents().get(1);
		private final RuleCall cRBRACETerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//Protocol returns BSPL:
		//	junkProtocol?=kPROTOCOL? name=ID LBRACE junkRole?=kROLE roles+=Role COMMA roles+=Role (COMMA roles+=Role)*
		//	junkPub?=kPARAMETER publicParams+=ParamDecl (COMMA publicParams+=ParamDecl)* (junkPriv?=kPRIVATE
		//	privateParams+=Parameter (COMMA privateParams+=Parameter)*)? references+=(Reference | Message)+ RBRACE;
		public ParserRule getRule() { return rule; }

		//junkProtocol?=kPROTOCOL? name=ID LBRACE junkRole?=kROLE roles+=Role COMMA roles+=Role (COMMA roles+=Role)*
		//junkPub?=kPARAMETER publicParams+=ParamDecl (COMMA publicParams+=ParamDecl)* (junkPriv?=kPRIVATE
		//privateParams+=Parameter (COMMA privateParams+=Parameter)*)? references+=(Reference | Message)+ RBRACE
		public Group getGroup() { return cGroup; }

		//junkProtocol?=kPROTOCOL?
		public Assignment getJunkProtocolAssignment_0() { return cJunkProtocolAssignment_0; }

		//kPROTOCOL
		public RuleCall getJunkProtocolKPROTOCOLEnumRuleCall_0_0() { return cJunkProtocolKPROTOCOLEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_2() { return cLBRACETerminalRuleCall_2; }

		//junkRole?=kROLE
		public Assignment getJunkRoleAssignment_3() { return cJunkRoleAssignment_3; }

		//kROLE
		public RuleCall getJunkRoleKROLEEnumRuleCall_3_0() { return cJunkRoleKROLEEnumRuleCall_3_0; }

		//roles+=Role
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_4_0() { return cRolesRoleParserRuleCall_4_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_5() { return cCOMMATerminalRuleCall_5; }

		//roles+=Role
		public Assignment getRolesAssignment_6() { return cRolesAssignment_6; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_6_0() { return cRolesRoleParserRuleCall_6_0; }

		//(COMMA roles+=Role)*
		public Group getGroup_7() { return cGroup_7; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7_0() { return cCOMMATerminalRuleCall_7_0; }

		//roles+=Role
		public Assignment getRolesAssignment_7_1() { return cRolesAssignment_7_1; }

		//Role
		public RuleCall getRolesRoleParserRuleCall_7_1_0() { return cRolesRoleParserRuleCall_7_1_0; }

		//junkPub?=kPARAMETER
		public Assignment getJunkPubAssignment_8() { return cJunkPubAssignment_8; }

		//kPARAMETER
		public RuleCall getJunkPubKPARAMETEREnumRuleCall_8_0() { return cJunkPubKPARAMETEREnumRuleCall_8_0; }

		//publicParams+=ParamDecl
		public Assignment getPublicParamsAssignment_9() { return cPublicParamsAssignment_9; }

		//ParamDecl
		public RuleCall getPublicParamsParamDeclParserRuleCall_9_0() { return cPublicParamsParamDeclParserRuleCall_9_0; }

		//(COMMA publicParams+=ParamDecl)*
		public Group getGroup_10() { return cGroup_10; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_10_0() { return cCOMMATerminalRuleCall_10_0; }

		//publicParams+=ParamDecl
		public Assignment getPublicParamsAssignment_10_1() { return cPublicParamsAssignment_10_1; }

		//ParamDecl
		public RuleCall getPublicParamsParamDeclParserRuleCall_10_1_0() { return cPublicParamsParamDeclParserRuleCall_10_1_0; }

		//(junkPriv?=kPRIVATE privateParams+=Parameter (COMMA privateParams+=Parameter)*)?
		public Group getGroup_11() { return cGroup_11; }

		//junkPriv?=kPRIVATE
		public Assignment getJunkPrivAssignment_11_0() { return cJunkPrivAssignment_11_0; }

		//kPRIVATE
		public RuleCall getJunkPrivKPRIVATEEnumRuleCall_11_0_0() { return cJunkPrivKPRIVATEEnumRuleCall_11_0_0; }

		//privateParams+=Parameter
		public Assignment getPrivateParamsAssignment_11_1() { return cPrivateParamsAssignment_11_1; }

		//Parameter
		public RuleCall getPrivateParamsParameterParserRuleCall_11_1_0() { return cPrivateParamsParameterParserRuleCall_11_1_0; }

		//(COMMA privateParams+=Parameter)*
		public Group getGroup_11_2() { return cGroup_11_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_11_2_0() { return cCOMMATerminalRuleCall_11_2_0; }

		//privateParams+=Parameter
		public Assignment getPrivateParamsAssignment_11_2_1() { return cPrivateParamsAssignment_11_2_1; }

		//Parameter
		public RuleCall getPrivateParamsParameterParserRuleCall_11_2_1_0() { return cPrivateParamsParameterParserRuleCall_11_2_1_0; }

		//references+=(Reference | Message)+
		public Assignment getReferencesAssignment_12() { return cReferencesAssignment_12; }

		//Reference | Message
		public Alternatives getReferencesAlternatives_12_0() { return cReferencesAlternatives_12_0; }

		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_12_0_0() { return cReferencesReferenceParserRuleCall_12_0_0; }

		//Message
		public RuleCall getReferencesMessageParserRuleCall_12_0_1() { return cReferencesMessageParserRuleCall_12_0_1; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_13() { return cRBRACETerminalRuleCall_13; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Role:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParamDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdornmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdornmentKAdornmentEnumRuleCall_0_0 = (RuleCall)cAdornmentAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamParameterParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Assignment cIsKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsKeyKKEYEnumRuleCall_2_0 = (RuleCall)cIsKeyAssignment_2.eContents().get(0);
		
		//ParamDecl:
		//	adornment=kAdornment param=Parameter isKey?=kKEY?;
		public ParserRule getRule() { return rule; }

		//adornment=kAdornment param=Parameter isKey?=kKEY?
		public Group getGroup() { return cGroup; }

		//adornment=kAdornment
		public Assignment getAdornmentAssignment_0() { return cAdornmentAssignment_0; }

		//kAdornment
		public RuleCall getAdornmentKAdornmentEnumRuleCall_0_0() { return cAdornmentKAdornmentEnumRuleCall_0_0; }

		//param=Parameter
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//Parameter
		public RuleCall getParamParameterParserRuleCall_1_0() { return cParamParameterParserRuleCall_1_0; }

		//isKey?=kKEY?
		public Assignment getIsKeyAssignment_2() { return cIsKeyAssignment_2; }

		//kKEY
		public RuleCall getIsKeyKKEYEnumRuleCall_2_0() { return cIsKeyKKEYEnumRuleCall_2_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParamRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdornmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdornmentKAdornmentEnumRuleCall_0_0 = (RuleCall)cAdornmentAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParamParameterCrossReference_1_0 = (CrossReference)cParamAssignment_1.eContents().get(0);
		private final RuleCall cParamParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cParamParameterCrossReference_1_0.eContents().get(1);
		private final Assignment cIsKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsKeyKKEYEnumRuleCall_2_0 = (RuleCall)cIsKeyAssignment_2.eContents().get(0);
		
		//ParamRef:
		//	adornment=kAdornment param=[Parameter] isKey?=kKEY?;
		public ParserRule getRule() { return rule; }

		//adornment=kAdornment param=[Parameter] isKey?=kKEY?
		public Group getGroup() { return cGroup; }

		//adornment=kAdornment
		public Assignment getAdornmentAssignment_0() { return cAdornmentAssignment_0; }

		//kAdornment
		public RuleCall getAdornmentKAdornmentEnumRuleCall_0_0() { return cAdornmentKAdornmentEnumRuleCall_0_0; }

		//param=[Parameter]
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//[Parameter]
		public CrossReference getParamParameterCrossReference_1_0() { return cParamParameterCrossReference_1_0; }

		//ID
		public RuleCall getParamParameterIDTerminalRuleCall_1_0_1() { return cParamParameterIDTerminalRuleCall_1_0_1; }

		//isKey?=kKEY?
		public Assignment getIsKeyAssignment_2() { return cIsKeyAssignment_2; }

		//kKEY
		public RuleCall getIsKeyKKEYEnumRuleCall_2_0() { return cIsKeyKKEYEnumRuleCall_2_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSenderRoleCrossReference_0_0 = (CrossReference)cSenderAssignment_0.eContents().get(0);
		private final RuleCall cSenderRoleIDTerminalRuleCall_0_0_1 = (RuleCall)cSenderRoleCrossReference_0_0.eContents().get(1);
		private final RuleCall cARROWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cReceiverAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReceiverRoleCrossReference_2_0 = (CrossReference)cReceiverAssignment_2.eContents().get(0);
		private final RuleCall cReceiverRoleIDTerminalRuleCall_2_0_1 = (RuleCall)cReceiverRoleCrossReference_2_0.eContents().get(1);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamsParamRefParserRuleCall_6_0 = (RuleCall)cParamsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cCOMMATerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cParamsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParamsParamRefParserRuleCall_7_1_0 = (RuleCall)cParamsAssignment_7_1.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Message:
		//	sender=[Role] ARROW receiver=[Role] COLON name=ID LBRACKET params+=ParamRef (COMMA params+=ParamRef)* RBRACKET;
		public ParserRule getRule() { return rule; }

		//sender=[Role] ARROW receiver=[Role] COLON name=ID LBRACKET params+=ParamRef (COMMA params+=ParamRef)* RBRACKET
		public Group getGroup() { return cGroup; }

		//sender=[Role]
		public Assignment getSenderAssignment_0() { return cSenderAssignment_0; }

		//[Role]
		public CrossReference getSenderRoleCrossReference_0_0() { return cSenderRoleCrossReference_0_0; }

		//ID
		public RuleCall getSenderRoleIDTerminalRuleCall_0_0_1() { return cSenderRoleIDTerminalRuleCall_0_0_1; }

		//ARROW
		public RuleCall getARROWTerminalRuleCall_1() { return cARROWTerminalRuleCall_1; }

		//receiver=[Role]
		public Assignment getReceiverAssignment_2() { return cReceiverAssignment_2; }

		//[Role]
		public CrossReference getReceiverRoleCrossReference_2_0() { return cReceiverRoleCrossReference_2_0; }

		//ID
		public RuleCall getReceiverRoleIDTerminalRuleCall_2_0_1() { return cReceiverRoleIDTerminalRuleCall_2_0_1; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_5() { return cLBRACKETTerminalRuleCall_5; }

		//params+=ParamRef
		public Assignment getParamsAssignment_6() { return cParamsAssignment_6; }

		//ParamRef
		public RuleCall getParamsParamRefParserRuleCall_6_0() { return cParamsParamRefParserRuleCall_6_0; }

		//(COMMA params+=ParamRef)*
		public Group getGroup_7() { return cGroup_7; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7_0() { return cCOMMATerminalRuleCall_7_0; }

		//params+=ParamRef
		public Assignment getParamsAssignment_7_1() { return cParamsAssignment_7_1; }

		//ParamRef
		public RuleCall getParamsParamRefParserRuleCall_7_1_0() { return cParamsParamRefParserRuleCall_7_1_0; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_8() { return cRBRACKETTerminalRuleCall_8; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefBSPLCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefBSPLIDTerminalRuleCall_0_0_1 = (RuleCall)cRefBSPLCrossReference_0_0.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRolesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRolesRoleCrossReference_2_0_0 = (CrossReference)cRolesAssignment_2_0.eContents().get(0);
		private final RuleCall cRolesRoleIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRolesRoleCrossReference_2_0_0.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParamRefParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsParamRefParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Reference:
		//	ref=[BSPL] LPAREN (roles+=[Role] COMMA)+ params+=ParamRef (COMMA params+=ParamRef)* RPAREN;
		public ParserRule getRule() { return rule; }

		//ref=[BSPL] LPAREN (roles+=[Role] COMMA)+ params+=ParamRef (COMMA params+=ParamRef)* RPAREN
		public Group getGroup() { return cGroup; }

		//ref=[BSPL]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[BSPL]
		public CrossReference getRefBSPLCrossReference_0_0() { return cRefBSPLCrossReference_0_0; }

		//ID
		public RuleCall getRefBSPLIDTerminalRuleCall_0_0_1() { return cRefBSPLIDTerminalRuleCall_0_0_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//(roles+=[Role] COMMA)+
		public Group getGroup_2() { return cGroup_2; }

		//roles+=[Role]
		public Assignment getRolesAssignment_2_0() { return cRolesAssignment_2_0; }

		//[Role]
		public CrossReference getRolesRoleCrossReference_2_0_0() { return cRolesRoleCrossReference_2_0_0; }

		//ID
		public RuleCall getRolesRoleIDTerminalRuleCall_2_0_0_1() { return cRolesRoleIDTerminalRuleCall_2_0_0_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1() { return cCOMMATerminalRuleCall_2_1; }

		//params+=ParamRef
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }

		//ParamRef
		public RuleCall getParamsParamRefParserRuleCall_3_0() { return cParamsParamRefParserRuleCall_3_0; }

		//(COMMA params+=ParamRef)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//params+=ParamRef
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }

		//ParamRef
		public RuleCall getParamsParamRefParserRuleCall_4_1_0() { return cParamsParamRefParserRuleCall_4_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_5() { return cRPARENTerminalRuleCall_5; }
	}
	
	
	public class KAdornmentElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kAdornment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIoIoKeyword_2_0 = (Keyword)cIoEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNilEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNilNilKeyword_3_0 = (Keyword)cNilEnumLiteralDeclaration_3.eContents().get(0);
		
		//// The terminals whose names begin with k are keywords of BSPL.
		//// We need to use enum instead of terminal for keywords.
		//enum kAdornment:
		//	in | out | io | nil;
		public EnumRule getRule() { return rule; }

		//in | out | io | nil
		public Alternatives getAlternatives() { return cAlternatives; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }

		//io
		public EnumLiteralDeclaration getIoEnumLiteralDeclaration_2() { return cIoEnumLiteralDeclaration_2; }

		//"io"
		public Keyword getIoIoKeyword_2_0() { return cIoIoKeyword_2_0; }

		//nil
		public EnumLiteralDeclaration getNilEnumLiteralDeclaration_3() { return cNilEnumLiteralDeclaration_3; }

		//"nil"
		public Keyword getNilNilKeyword_3_0() { return cNilNilKeyword_3_0; }
	}

	public class KPROTOCOLElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kPROTOCOL");
		private final EnumLiteralDeclaration cProtocolEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cProtocolProtocolKeyword_0 = (Keyword)cProtocolEnumLiteralDeclaration.eContents().get(0);
		
		//enum kPROTOCOL:
		//	protocol;
		public EnumRule getRule() { return rule; }

		//protocol
		public EnumLiteralDeclaration getProtocolEnumLiteralDeclaration() { return cProtocolEnumLiteralDeclaration; }

		//"protocol"
		public Keyword getProtocolProtocolKeyword_0() { return cProtocolProtocolKeyword_0; }
	}

	public class KROLEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kROLE");
		private final EnumLiteralDeclaration cRoleEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cRoleRoleKeyword_0 = (Keyword)cRoleEnumLiteralDeclaration.eContents().get(0);
		
		//enum kROLE:
		//	role;
		public EnumRule getRule() { return rule; }

		//role
		public EnumLiteralDeclaration getRoleEnumLiteralDeclaration() { return cRoleEnumLiteralDeclaration; }

		//"role"
		public Keyword getRoleRoleKeyword_0() { return cRoleRoleKeyword_0; }
	}

	public class KPARAMETERElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kPARAMETER");
		private final EnumLiteralDeclaration cParameterEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cParameterParameterKeyword_0 = (Keyword)cParameterEnumLiteralDeclaration.eContents().get(0);
		
		//enum kPARAMETER:
		//	parameter;
		public EnumRule getRule() { return rule; }

		//parameter
		public EnumLiteralDeclaration getParameterEnumLiteralDeclaration() { return cParameterEnumLiteralDeclaration; }

		//"parameter"
		public Keyword getParameterParameterKeyword_0() { return cParameterParameterKeyword_0; }
	}

	public class KPRIVATEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kPRIVATE");
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_0 = (Keyword)cPrivateEnumLiteralDeclaration.eContents().get(0);
		
		//enum kPRIVATE:
		//	private;
		public EnumRule getRule() { return rule; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration() { return cPrivateEnumLiteralDeclaration; }

		//"private"
		public Keyword getPrivatePrivateKeyword_0() { return cPrivatePrivateKeyword_0; }
	}

	public class KKEYElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kKEY");
		private final EnumLiteralDeclaration cKeyEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cKeyKeyKeyword_0 = (Keyword)cKeyEnumLiteralDeclaration.eContents().get(0);
		
		//enum kKEY:
		//	key;
		public EnumRule getRule() { return rule; }

		//key
		public EnumLiteralDeclaration getKeyEnumLiteralDeclaration() { return cKeyEnumLiteralDeclaration; }

		//"key"
		public Keyword getKeyKeyKeyword_0() { return cKeyKeyKeyword_0; }
	}
	
	private ProtocolElements pProtocol;
	private RoleElements pRole;
	private ParamDeclElements pParamDecl;
	private ParameterElements pParameter;
	private ParamRefElements pParamRef;
	private MessageElements pMessage;
	private ReferenceElements pReference;
	private KAdornmentElements unknownRuleKAdornment;
	private KPROTOCOLElements unknownRuleKPROTOCOL;
	private KROLEElements unknownRuleKROLE;
	private KPARAMETERElements unknownRuleKPARAMETER;
	private KPRIVATEElements unknownRuleKPRIVATE;
	private KKEYElements unknownRuleKKEY;
	private TerminalRule tARROW;
	private TerminalRule tCOMMA;
	private TerminalRule tCOLON;
	private TerminalRule tLBRACE;
	private TerminalRule tRBRACE;
	private TerminalRule tLBRACKET;
	private TerminalRule tRBRACKET;
	private TerminalRule tLPAREN;
	private TerminalRule tRPAREN;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public BSPLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Protocol returns BSPL:
	//	junkProtocol?=kPROTOCOL? name=ID LBRACE junkRole?=kROLE roles+=Role COMMA roles+=Role (COMMA roles+=Role)*
	//	junkPub?=kPARAMETER publicParams+=ParamDecl (COMMA publicParams+=ParamDecl)* (junkPriv?=kPRIVATE
	//	privateParams+=Parameter (COMMA privateParams+=Parameter)*)? references+=(Reference | Message)+ RBRACE;
	public ProtocolElements getProtocolAccess() {
		return (pProtocol != null) ? pProtocol : (pProtocol = new ProtocolElements());
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//Role:
	//	name=ID;
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//ParamDecl:
	//	adornment=kAdornment param=Parameter isKey?=kKEY?;
	public ParamDeclElements getParamDeclAccess() {
		return (pParamDecl != null) ? pParamDecl : (pParamDecl = new ParamDeclElements());
	}
	
	public ParserRule getParamDeclRule() {
		return getParamDeclAccess().getRule();
	}

	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParamRef:
	//	adornment=kAdornment param=[Parameter] isKey?=kKEY?;
	public ParamRefElements getParamRefAccess() {
		return (pParamRef != null) ? pParamRef : (pParamRef = new ParamRefElements());
	}
	
	public ParserRule getParamRefRule() {
		return getParamRefAccess().getRule();
	}

	//Message:
	//	sender=[Role] ARROW receiver=[Role] COLON name=ID LBRACKET params+=ParamRef (COMMA params+=ParamRef)* RBRACKET;
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Reference:
	//	ref=[BSPL] LPAREN (roles+=[Role] COMMA)+ params+=ParamRef (COMMA params+=ParamRef)* RPAREN;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//// The terminals whose names begin with k are keywords of BSPL.
	//// We need to use enum instead of terminal for keywords.
	//enum kAdornment:
	//	in | out | io | nil;
	public KAdornmentElements getKAdornmentAccess() {
		return (unknownRuleKAdornment != null) ? unknownRuleKAdornment : (unknownRuleKAdornment = new KAdornmentElements());
	}
	
	public EnumRule getKAdornmentRule() {
		return getKAdornmentAccess().getRule();
	}

	//enum kPROTOCOL:
	//	protocol;
	public KPROTOCOLElements getKPROTOCOLAccess() {
		return (unknownRuleKPROTOCOL != null) ? unknownRuleKPROTOCOL : (unknownRuleKPROTOCOL = new KPROTOCOLElements());
	}
	
	public EnumRule getKPROTOCOLRule() {
		return getKPROTOCOLAccess().getRule();
	}

	//enum kROLE:
	//	role;
	public KROLEElements getKROLEAccess() {
		return (unknownRuleKROLE != null) ? unknownRuleKROLE : (unknownRuleKROLE = new KROLEElements());
	}
	
	public EnumRule getKROLERule() {
		return getKROLEAccess().getRule();
	}

	//enum kPARAMETER:
	//	parameter;
	public KPARAMETERElements getKPARAMETERAccess() {
		return (unknownRuleKPARAMETER != null) ? unknownRuleKPARAMETER : (unknownRuleKPARAMETER = new KPARAMETERElements());
	}
	
	public EnumRule getKPARAMETERRule() {
		return getKPARAMETERAccess().getRule();
	}

	//enum kPRIVATE:
	//	private;
	public KPRIVATEElements getKPRIVATEAccess() {
		return (unknownRuleKPRIVATE != null) ? unknownRuleKPRIVATE : (unknownRuleKPRIVATE = new KPRIVATEElements());
	}
	
	public EnumRule getKPRIVATERule() {
		return getKPRIVATEAccess().getRule();
	}

	//enum kKEY:
	//	key;
	public KKEYElements getKKEYAccess() {
		return (unknownRuleKKEY != null) ? unknownRuleKKEY : (unknownRuleKKEY = new KKEYElements());
	}
	
	public EnumRule getKKEYRule() {
		return getKKEYAccess().getRule();
	}

	//terminal ARROW:
	//	"->" | "&rarr;";
	public TerminalRule getARROWRule() {
		return (tARROW != null) ? tARROW : (tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARROW"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal LBRACE:
	//	"{";
	public TerminalRule getLBRACERule() {
		return (tLBRACE != null) ? tLBRACE : (tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACE"));
	} 

	//terminal RBRACE:
	//	"}";
	public TerminalRule getRBRACERule() {
		return (tRBRACE != null) ? tRBRACE : (tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACE"));
	} 

	//terminal LBRACKET:
	//	"[";
	public TerminalRule getLBRACKETRule() {
		return (tLBRACKET != null) ? tLBRACKET : (tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACKET"));
	} 

	//terminal RBRACKET:
	//	"]";
	public TerminalRule getRBRACKETRule() {
		return (tRBRACKET != null) ? tRBRACKET : (tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACKET"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
