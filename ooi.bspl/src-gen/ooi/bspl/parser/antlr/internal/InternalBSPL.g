/*
* generated by Xtext
*/
grammar InternalBSPL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ooi.bspl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ooi.bspl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import ooi.bspl.services.BSPLGrammarAccess;

}

@parser::members {

 	private BSPLGrammarAccess grammarAccess;
 	
    public InternalBSPLParser(TokenStream input, IAstFactory factory, BSPLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("ooi/bspl/parser/antlr/internal/InternalBSPL.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Protocol";	
   	}
   	
   	@Override
   	protected BSPLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProtocol
entryRuleProtocol returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProtocolRule(), currentNode); }
	 iv_ruleProtocol=ruleProtocol 
	 { $current=$iv_ruleProtocol.current; } 
	 EOF 
;

// Rule Protocol
ruleProtocol returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getJunkProtocolKPROTOCOLEnumRuleCall_0_0(), currentNode); 
	    }
		lv_junkProtocol_0_0=rulekPROTOCOL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"junkProtocol",
	        		true, 
	        		"kPROTOCOL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProtocolAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_LBRACE
    { 
    createLeafNode(grammarAccess.getProtocolAccess().getLBRACETerminalRuleCall_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getJunkRoleKROLEEnumRuleCall_3_0(), currentNode); 
	    }
		lv_junkRole_3_0=rulekROLE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"junkRole",
	        		true, 
	        		"kROLE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getRolesRoleParserRuleCall_4_0(), currentNode); 
	    }
		lv_roles_4_0=ruleRole		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"roles",
	        		lv_roles_4_0, 
	        		"Role", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)RULE_COMMA
    { 
    createLeafNode(grammarAccess.getProtocolAccess().getCOMMATerminalRuleCall_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getRolesRoleParserRuleCall_6_0(), currentNode); 
	    }
		lv_roles_6_0=ruleRole		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"roles",
	        		lv_roles_6_0, 
	        		"Role", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getProtocolAccess().getCOMMATerminalRuleCall_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getRolesRoleParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_roles_8_0=ruleRole		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"roles",
	        		lv_roles_8_0, 
	        		"Role", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getJunkPubKPARAMETEREnumRuleCall_8_0(), currentNode); 
	    }
		lv_junkPub_9_0=rulekPARAMETER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"junkPub",
	        		true, 
	        		"kPARAMETER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getPublicParamsParamDeclParserRuleCall_9_0(), currentNode); 
	    }
		lv_publicParams_10_0=ruleParamDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"publicParams",
	        		lv_publicParams_10_0, 
	        		"ParamDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getProtocolAccess().getCOMMATerminalRuleCall_10_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getPublicParamsParamDeclParserRuleCall_10_1_0(), currentNode); 
	    }
		lv_publicParams_12_0=ruleParamDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"publicParams",
	        		lv_publicParams_12_0, 
	        		"ParamDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getJunkPrivKPRIVATEEnumRuleCall_11_0_0(), currentNode); 
	    }
		lv_junkPriv_13_0=rulekPRIVATE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"junkPriv",
	        		true, 
	        		"kPRIVATE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getPrivateParamsParameterParserRuleCall_11_1_0(), currentNode); 
	    }
		lv_privateParams_14_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"privateParams",
	        		lv_privateParams_14_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getProtocolAccess().getCOMMATerminalRuleCall_11_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getPrivateParamsParameterParserRuleCall_11_2_1_0(), currentNode); 
	    }
		lv_privateParams_16_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"privateParams",
	        		lv_privateParams_16_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getReferencesReferenceParserRuleCall_12_0_0(), currentNode); 
	    }
		lv_references_17_1=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"references",
	        		lv_references_17_1, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getProtocolAccess().getReferencesMessageParserRuleCall_12_0_1(), currentNode); 
	    }
		lv_references_17_2=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProtocolRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"references",
	        		lv_references_17_2, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)+RULE_RBRACE
    { 
    createLeafNode(grammarAccess.getProtocolAccess().getRBRACETerminalRuleCall_13(), null); 
    }
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRoleRule(), currentNode); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleParamDecl
entryRuleParamDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamDeclRule(), currentNode); }
	 iv_ruleParamDecl=ruleParamDecl 
	 { $current=$iv_ruleParamDecl.current; } 
	 EOF 
;

// Rule ParamDecl
ruleParamDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamDeclAccess().getAdornmentKAdornmentEnumRuleCall_0_0(), currentNode); 
	    }
		lv_adornment_0_0=rulekAdornment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"adornment",
	        		lv_adornment_0_0, 
	        		"kAdornment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamDeclAccess().getParamParameterParserRuleCall_1_0(), currentNode); 
	    }
		lv_param_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"param",
	        		lv_param_1_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamDeclAccess().getIsKeyKKEYEnumRuleCall_2_0(), currentNode); 
	    }
		lv_isKey_2_0=rulekKEY		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isKey",
	        		true, 
	        		"kKEY", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleParamRef
entryRuleParamRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamRefRule(), currentNode); }
	 iv_ruleParamRef=ruleParamRef 
	 { $current=$iv_ruleParamRef.current; } 
	 EOF 
;

// Rule ParamRef
ruleParamRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamRefAccess().getAdornmentKAdornmentEnumRuleCall_0_0(), currentNode); 
	    }
		lv_adornment_0_0=rulekAdornment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"adornment",
	        		lv_adornment_0_0, 
	        		"kAdornment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParamRefAccess().getParamParameterCrossReference_1_0(), "param"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamRefAccess().getIsKeyKKEYEnumRuleCall_2_0(), currentNode); 
	    }
		lv_isKey_2_0=rulekKEY		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isKey",
	        		true, 
	        		"kKEY", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMessageAccess().getSenderRoleCrossReference_0_0(), "sender"); 
	}

)
)RULE_ARROW
    { 
    createLeafNode(grammarAccess.getMessageAccess().getARROWTerminalRuleCall_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMessageAccess().getReceiverRoleCrossReference_2_0(), "receiver"); 
	}

)
)RULE_COLON
    { 
    createLeafNode(grammarAccess.getMessageAccess().getCOLONTerminalRuleCall_3(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_4_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_LBRACKET
    { 
    createLeafNode(grammarAccess.getMessageAccess().getLBRACKETTerminalRuleCall_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getParamsParamRefParserRuleCall_6_0(), currentNode); 
	    }
		lv_params_6_0=ruleParamRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_6_0, 
	        		"ParamRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getMessageAccess().getCOMMATerminalRuleCall_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getParamsParamRefParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_params_8_0=ruleParamRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_8_0, 
	        		"ParamRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*RULE_RBRACKET
    { 
    createLeafNode(grammarAccess.getMessageAccess().getRBRACKETTerminalRuleCall_8(), null); 
    }
)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRule(), currentNode); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferenceAccess().getRefBSPLCrossReference_0_0(), "ref"); 
	}

)
)RULE_LPAREN
    { 
    createLeafNode(grammarAccess.getReferenceAccess().getLPARENTerminalRuleCall_1(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferenceAccess().getRolesRoleCrossReference_2_0_0(), "roles"); 
	}

)
)RULE_COMMA
    { 
    createLeafNode(grammarAccess.getReferenceAccess().getCOMMATerminalRuleCall_2_1(), null); 
    }
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceAccess().getParamsParamRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_params_4_0=ruleParamRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_4_0, 
	        		"ParamRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_COMMA
    { 
    createLeafNode(grammarAccess.getReferenceAccess().getCOMMATerminalRuleCall_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceAccess().getParamsParamRefParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_params_6_0=ruleParamRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_6_0, 
	        		"ParamRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*RULE_RPAREN
    { 
    createLeafNode(grammarAccess.getReferenceAccess().getRPARENTerminalRuleCall_5(), null); 
    }
)
;





// Rule kAdornment
rulekAdornment returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'in' 
	{
        $current = grammarAccess.getKAdornmentAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKAdornmentAccess().getInEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'out' 
	{
        $current = grammarAccess.getKAdornmentAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKAdornmentAccess().getOutEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'io' 
	{
        $current = grammarAccess.getKAdornmentAccess().getIoEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKAdornmentAccess().getIoEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'nil' 
	{
        $current = grammarAccess.getKAdornmentAccess().getNilEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKAdornmentAccess().getNilEnumLiteralDeclaration_3(), null); 
    }
));



// Rule kPROTOCOL
rulekPROTOCOL returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'protocol' 
	{
        $current = grammarAccess.getKPROTOCOLAccess().getProtocolEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKPROTOCOLAccess().getProtocolEnumLiteralDeclaration(), null); 
    }
);



// Rule kROLE
rulekROLE returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'role' 
	{
        $current = grammarAccess.getKROLEAccess().getRoleEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKROLEAccess().getRoleEnumLiteralDeclaration(), null); 
    }
);



// Rule kPARAMETER
rulekPARAMETER returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'parameter' 
	{
        $current = grammarAccess.getKPARAMETERAccess().getParameterEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKPARAMETERAccess().getParameterEnumLiteralDeclaration(), null); 
    }
);



// Rule kPRIVATE
rulekPRIVATE returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'private' 
	{
        $current = grammarAccess.getKPRIVATEAccess().getPrivateEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKPRIVATEAccess().getPrivateEnumLiteralDeclaration(), null); 
    }
);



// Rule kKEY
rulekKEY returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'key' 
	{
        $current = grammarAccess.getKKEYAccess().getKeyEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKKEYAccess().getKeyEnumLiteralDeclaration(), null); 
    }
);



RULE_ARROW : ('->'|'&rarr;');

RULE_COMMA : ',';

RULE_COLON : ':';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


